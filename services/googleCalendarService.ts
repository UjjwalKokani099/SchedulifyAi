import type { ScheduleItem, StudyGoal } from '../types';
import { config } from '../components/config';

// Configuration is now imported from the central config file.
const CLIENT_ID = config.google.clientId;
const API_KEY = config.firebase.apiKey; 
const DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
const SCOPES = "https://www.googleapis.com/auth/calendar.events";

declare const gapi: any;

export const initGapiClient = (updateSigninStatus: (isSignedIn: boolean) => void) => {
    return new Promise<void>((resolve, reject) => {
        if (!CLIENT_ID || CLIENT_ID.includes("YOUR_") || !API_KEY || API_KEY.includes("YOUR_")) {
          // Reject the promise if essential configuration is missing.
          return reject(new Error("Google Calendar client ID or API key is not configured. Please update the `config.ts` file."));
        }
        gapi.load('client:auth2', async () => {
            try {
                await gapi.client.init({
                    apiKey: API_KEY,
                    clientId: CLIENT_ID,
                    discoveryDocs: DISCOVERY_DOCS,
                    scope: SCOPES,
                });
                
                const authInstance = gapi.auth2.getAuthInstance();
                
                // Listen for sign-in state changes.
                authInstance.isSignedIn.listen(updateSigninStatus);

                // Handle the initial sign-in state.
                updateSigninStatus(authInstance.isSignedIn.get());
                resolve();

            } catch (error) {
                console.error("Error initializing GAPI client", error);
                reject(error);
            }
        });
    });
};

export const handleAuthClick = () => {
    gapi.auth2.getAuthInstance().signIn();
};

export const handleSignoutClick = () => {
    gapi.auth2.getAuthInstance().signOut();
};

const parseTime = (timeStr: string): [number, number] => {
    const time = timeStr.match(/(\d+):?(\d+)?\s*(AM|PM)/i);
    if (!time) return [0, 0];
    let [ , hoursStr, minutesStr, ampm ] = time;
    let hours = parseInt(hoursStr, 10);
    const minutes = parseInt(minutesStr || '0', 10);

    if (ampm.toUpperCase() === 'PM' && hours < 12) {
        hours += 12;
    }
    if (ampm.toUpperCase() === 'AM' && hours === 12) {
        hours = 0;
    }
    return [hours, minutes];
};


export const syncScheduleToCalendar = async (schedule: ScheduleItem[], goal: StudyGoal) => {
    if (!gapi.auth2.getAuthInstance().isSignedIn.get()) {
        throw new Error("User not signed in.");
    }

    const batch = gapi.client.newBatch();
    const today = new Date();
    
    // Calculate the date of the next Monday
    const startOfWeek = new Date(today);
    const dayOfWeek = today.getDay(); // Sunday = 0, Monday = 1, etc.
    const daysUntilMonday = (dayOfWeek === 0) ? 1 : (8 - dayOfWeek);
    startOfWeek.setDate(today.getDate() + daysUntilMonday);
    startOfWeek.setHours(0, 0, 0, 0);

    const dayIndexMap: { [key: string]: number } = { 'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3, 'friday': 4, 'saturday': 5, 'sunday': 6 };

    schedule.forEach(item => {
        const [startTimeStr, endTimeStr] = item.timeSlot.split('-').map(s => s.trim());
        if (!startTimeStr || !endTimeStr) return;
        
        const dayIndex = dayIndexMap[item.day.toLowerCase()];
        if (dayIndex === undefined) return;

        const eventDate = new Date(startOfWeek);
        eventDate.setDate(startOfWeek.getDate() + dayIndex);

        const [startHours, startMinutes] = parseTime(startTimeStr);
        const [endHours, endMinutes] = parseTime(endTimeStr);

        const startTime = new Date(eventDate);
        startTime.setHours(startHours, startMinutes, 0, 0);

        const endTime = new Date(eventDate);
        endTime.setHours(endHours, endMinutes, 0, 0);
        
        const event = {
            'summary': `${item.subject}: ${item.topic}`,
            'description': `Activity: ${item.activity}\nPrimary Goal: ${goal.exam}\n\nGenerated by Schedulify AI.`,
            'start': {
                'dateTime': startTime.toISOString(),
                'timeZone': Intl.DateTimeFormat().resolvedOptions().timeZone,
            },
            'end': {
                'dateTime': endTime.toISOString(),
                'timeZone': Intl.DateTimeFormat().resolvedOptions().timeZone,
            },
            'reminders': {
                'useDefault': false,
                'overrides': [
                    { 'method': 'popup', 'minutes': 10 },
                ],
            },
        };

        batch.add(gapi.client.calendar.events.insert({
            'calendarId': 'primary',
            'resource': event,
        }));
    });
    
    const response = await batch;
    const successfulEvents = Object.values(response.result).filter((res: any) => res.status === 200);

    if(Object.keys(response.result).length > 0 && successfulEvents.length === 0) {
        throw new Error("All events failed to sync. Check console for details.");
    }
    
    return successfulEvents;
};